Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Parse eccoload.txt for nodes presently in the cluster
def parse_eccoload(file_path):
    """
    Parse the eccoload.txt file to extract the list of nodes currently allocated to the cluster.
    
    Args:
        file_path (str): Path to the eccoload.txt file.
        
    Returns:
        list: A list of node names currently allocated to the cluster.
    """
    allocated_nodes = []
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            # Look for lines with NODELIST at the end
            lines = content.splitlines()
            for line in lines:
                if 'cbsuecco' in line:
                    parts = line.split()
                    # Get the last part which contains the node list
                    nodelist = parts[-1]
                    
                    # Process the nodelist to get individual node names
                    if '[' in nodelist:
                        # Handle patterns like cbsuecco[13-14]
                        base_name = nodelist.split('[')[0]
                        ranges_part = nodelist.split('[')[1].rstrip(']')
                        
                        # Process each comma-separated range
                        for range_part in ranges_part.split(','):
                            if '-' in range_part:
                                # Handle ranges like 13-14
                                start, end = map(int, range_part.split('-'))
                                for i in range(start, end + 1):
                                    if i < 10:
                                        allocated_nodes.append(f"{base_name}0{i}")
                                    else:
                                        allocated_nodes.append(f"{base_name}{i}")
                            else:
                                # Handle single numbers
                                try:
                                    num = int(range_part)
                                    if num < 10:
                                        allocated_nodes.append(f"{base_name}0{num}")
                                    else:
                                        allocated_nodes.append(f"{base_name}{num}")
                                except ValueError:
                                    # If not a number, just add as is
                                    allocated_nodes.append(f"{base_name}{range_part}")
                    else:
                        # Handle simple node names without brackets
                        allocated_nodes.append(nodelist)
    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
    except IOError as e:
        print(f"Error reading file: {e}")
        
    return allocated_nodes

# Get the list of allocated nodes
eccoload_path = os.path.join(project_root, "_data", "eccoload.txt")
allocated_nodes = parse_eccoload(eccoload_path)

# Filter the nodes DataFrame for the allocated nodes
allocated_nodes = nodes[nodes['Nodename'].isin(allocated_nodes)]

# Compute total cores and RAM for flex nodes
alloc_total_cores = allocated_nodes['cores'].sum()
alloc_total_ram = allocated_nodes['RAM'].sum()

# Display the results
print(f"Total cores currently available across all SLURM nodes: {alloc_total_cores}")
print(f"Total RAM currently available across all SLURM nodes: {alloc_total_ram} GB")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[5], line 63[0m
[1;32m     61[0m [38;5;66;03m# Get the list of allocated nodes[39;00m
[1;32m     62[0m eccoload_path [38;5;241m=[39m os[38;5;241m.[39mpath[38;5;241m.[39mjoin(project_root, [38;5;124m"[39m[38;5;124m_data[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124meccoload.txt[39m[38;5;124m"[39m)
[0;32m---> 63[0m allocated_nodes [38;5;241m=[39m [43mparse_eccoload[49m[43m([49m[43meccoload_path[49m[43m)[49m
[1;32m     65[0m [38;5;66;03m# Filter the nodes DataFrame for the allocated nodes[39;00m
[1;32m     66[0m allocated_nodes [38;5;241m=[39m nodes[nodes[[38;5;124m'[39m[38;5;124mNodename[39m[38;5;124m'[39m][38;5;241m.[39misin(allocated_nodes)]

Cell [0;32mIn[5], line 34[0m, in [0;36mparse_eccoload[0;34m(file_path)[0m
[1;32m     31[0m [38;5;28;01mfor[39;00m range_part [38;5;129;01min[39;00m ranges_part[38;5;241m.[39msplit([38;5;124m'[39m[38;5;124m,[39m[38;5;124m'[39m):
[1;32m     32[0m     [38;5;28;01mif[39;00m [38;5;124m'[39m[38;5;124m-[39m[38;5;124m'[39m [38;5;129;01min[39;00m range_part:
[1;32m     33[0m         [38;5;66;03m# Handle ranges like 13-14[39;00m
[0;32m---> 34[0m         start, end [38;5;241m=[39m [38;5;28mmap[39m([38;5;28mint[39m, range_part[38;5;241m.[39msplit([38;5;124m'[39m[38;5;124m-[39m[38;5;124m'[39m))
[1;32m     35[0m         [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(start, end [38;5;241m+[39m [38;5;241m1[39m):
[1;32m     36[0m             [38;5;28;01mif[39;00m i [38;5;241m<[39m [38;5;241m10[39m:

[0;31mValueError[0m: invalid literal for int() with base 10: '08]'

